C51 COMPILER V9.00   STC_ISR                                                               03/16/2017 10:36:27 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE STC_ISR
OBJECT MODULE PLACED IN STC_ISR.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE STC_ISR.C BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          ////**********************************////
   2          //=================//
   3          //本程序适用于
   4          //用于USB485-232 写卡器
   5          //MCU：stc12c5a08s2
   6          //晶振：29.4912MHz 震荡周期0.4069us
   7          //文件：STC_ISR.C
   8          //================//
   9          ////**********************************////
  10          #include<STC_ISR.H>
  11          #include<STC_USER.H>
  12          /*局部变量定义*/
  13          sbit LED1=P1^6;
  14          sbit LED2=P1^7;
  15          sbit LED7=P0^1;
  16          sbit LED8=P0^2;
  17          sbit LED9=P0^3;
  18          
  19          unsigned char receive_PC_count=0;//计数接收来自PC数据  
  20          unsigned char start_receive_pc=0;
  21          volatile unsigned char xdata receive_PC_data[50];//接收来自PC数据  
  22          unsigned char receive_PC_overtime_count=0;//接收PC数据超时计数 
  23          unsigned char receive_cardhead_overtime_count=0;//接收CARDHEAD数据超时计数 
  24          unsigned char t0_count=0;
  25          volatile bit time_200ms_ready=0;
  26          unsigned char receive_cardhead_count=0;//接收卡头数据计数 
  27          volatile bit delay1s_ready=0;
  28          unsigned char delay1s_count=0;    
  29          
  30          /**/
  31          /*全局变量定义*/
  32          volatile unsigned char xdata received_PC_data[48];//来自PC校验成功的数据 出去帧头 帧尾    
  33          volatile bit receive_pc_success=0;//接收PC数据成功标志  
  34          volatile unsigned char xdata receive_CARDHEAD_data[30];//接受来自卡头数据
  35          extern unsigned char receive_cardhead_start;//接收卡头数据状态  
  36          extern unsigned char receive_cardhead_success;//接收卡头数据成功标志 
  37          extern unsigned char xdata received_CARDHEAD_data[28];//接收卡头数据成功  
  38          extern unsigned char receive_card_state;//接收卡数据状态  
  39          extern unsigned char xdata send_pc_data[50];
  40          extern unsigned char send_pc_count; 
  41          extern bit is_batch;//批量处理标志  
  42          /**/
  43          
  44          
  45          //*************************//
  46          //name:init_time0
  47          //discription:定时器0中断初始化
  48          //in:
  49          //out:
  50          void TIME0_ISR()interrupt 1 using 1
  51          {
  52   1        TF0=0;
  53   1        TL0=(65535-t_20ms)%256;
  54   1        TH0=(65535-t_20ms)/256;
  55   1        delay1s_count++;
C51 COMPILER V9.00   STC_ISR                                                               03/16/2017 10:36:27 PAGE 2   

  56   1        if(delay1s_count>=50) delay1s_ready=1;
  57   1        t0_count++;
  58   1        if(t0_count>=10)
  59   1        {
  60   2          t0_count=0;
  61   2          time_200ms_ready=1;
  62   2          LED2=!LED2;
  63   2        }
  64   1        if(start_receive_pc)
  65   1        {     
  66   2          receive_PC_overtime_count++;
  67   2          if(receive_PC_overtime_count>=10)
  68   2          {
  69   3            int i=0;
  70   3            start_receive_pc=0;
  71   3            for(i=0;i<48;i++)
  72   3            {
  73   4              received_PC_data[i]=0;        
  74   4            }
  75   3            receive_pc_success=0;
  76   3          }
  77   2        }
  78   1        if(receive_card_state==0)
  79   1        {
  80   2          receive_cardhead_overtime_count++;
  81   2          if(receive_cardhead_overtime_count>=4)
  82   2          {
  83   3            int i=0;
  84   3            receive_cardhead_start=0;
  85   3            receive_card_state=0x80;
  86   3            receive_cardhead_overtime_count=0;
  87   3            for(i=0;i<28;i++)
  88   3            {
  89   4              received_CARDHEAD_data[i]=0;        
  90   4            } 
  91   3            receive_cardhead_success=0; 
  92   3          }
  93   2        }
  94   1      
  95   1      }
  96          
  97          //******//
  98          
  99          //*************************//
 100          //name:USART1_ISR
 101          //discription:
 102          //in:
 103          //out:
 104          void USART1_ISR(void)interrupt 4 using 2
 105          {
 106   1        int i=0;
 107   1        if(RI)
 108   1        {
 109   2          RI=0;
 110   2          receive_PC_count++;
 111   2          receive_PC_overtime_count=0;
 112   2          if((start_receive_pc==0)&&(SBUF==0xbe))
 113   2          {
 114   3            receive_PC_count=0;
 115   3            start_receive_pc=1;
 116   3            receive_pc_success=0;
 117   3            receive_PC_data[receive_PC_count]=SBUF;
C51 COMPILER V9.00   STC_ISR                                                               03/16/2017 10:36:27 PAGE 3   

 118   3          }else if(receive_PC_count==1)
 119   2          {
 120   3            receive_PC_data[receive_PC_count]=SBUF;
 121   3          }else if(receive_PC_count<(receive_PC_data[1]+2))
 122   2          {
 123   3            receive_PC_data[receive_PC_count]=SBUF;
 124   3            if((receive_PC_count==(receive_PC_data[1]+1))&&(receive_PC_data[receive_PC_count]==0xe0))
 125   3            {
 126   4              if(verr_recevie_pc()==1)
 127   4              {LED7=!LED7;
 128   5                for(i=0;i<48;i++)
 129   5                {
 130   6                  received_PC_data[i]=receive_PC_data[i+1];           
 131   6                }
 132   5                receive_pc_success=1;
 133   5                if(received_PC_data[1]==0x07) is_batch=0;
 134   5              }else
 135   4              {
 136   5                int i=0;
 137   5                for(i=0;i<48;i++)
 138   5                {
 139   6                  received_PC_data[i]=0;            
 140   6                }
 141   5                receive_pc_success=0;         
 142   5              }
 143   4              start_receive_pc=0;
 144   4            }
 145   3          }else
 146   2          {
 147   3            int i=0;
 148   3            start_receive_pc=0;
 149   3            for(i=0;i<20;i++)
 150   3            {
 151   4              received_PC_data[i]=0;        
 152   4            } 
 153   3            receive_pc_success=0;   
 154   3          }
 155   2          
 156   2          
 157   2        }
 158   1      //  else if(TI)
 159   1      //  {
 160   1      //    TI=0;
 161   1      //    if(send_pc_count<(send_pc_data[1]+2))
 162   1      //      SBUF=send_pc_data[send_pc_count++];
 163   1      //    else REN=1;
 164   1      //  }
 165   1      }
 166          
 167          //******//
 168          //*************************//
 169          //name:USART1_ISR
 170          //discription:
 171          //in:
 172          //out:
 173          void USART2_ISR(void)interrupt 8 using 3
 174          {
 175   1            int i=0;
 176   1            if(S2CON&0x01)
 177   1            {
 178   2              
 179   2              S2CON&=0xfe;
C51 COMPILER V9.00   STC_ISR                                                               03/16/2017 10:36:27 PAGE 4   

 180   2              receive_cardhead_count++;
 181   2              receive_cardhead_overtime_count=0;
 182   2              if((S2BUF==0xaa)&&(receive_cardhead_start==0))
 183   2              {
 184   3                receive_cardhead_start=1;
 185   3                receive_cardhead_count=0;
 186   3                receive_cardhead_success=0;
 187   3                receive_CARDHEAD_data[receive_cardhead_count]=S2BUF;
 188   3              }else if(receive_cardhead_count<3)
 189   2              {
 190   3                receive_CARDHEAD_data[receive_cardhead_count]=S2BUF;
 191   3              }else if(receive_cardhead_count<(receive_CARDHEAD_data[2]+3))
 192   2              {
 193   3                receive_CARDHEAD_data[receive_cardhead_count]=S2BUF;
 194   3                if(receive_cardhead_count==(receive_CARDHEAD_data[2]+2))
 195   3                {
 196   4                  if(verr_recevie_cardhead()==1)
 197   4                  {
 198   5                    LED9=!LED9;
 199   5                    receive_card_state=0x01;
 200   5                    for(i=0;i<28;i++)
 201   5                    {
 202   6                      received_CARDHEAD_data[i]=receive_CARDHEAD_data[i+2];
 203   6                    }
 204   5                    receive_cardhead_success=1;
 205   5                  }else
 206   4                  {
 207   5                    receive_card_state=0x02;
 208   5                    for(i=0;i<28;i++)
 209   5                    {
 210   6                      received_CARDHEAD_data[i]=0;
 211   6                    }
 212   5                    receive_cardhead_success=0;       
 213   5                  }
 214   4                }
 215   3                receive_cardhead_start=0;
 216   3              }else
 217   2              {
 218   3                for(i=0;i<28;i++)
 219   3                {
 220   4                  received_CARDHEAD_data[i]=0;
 221   4                }
 222   3                receive_card_state=0x04;
 223   3                receive_cardhead_start=0;
 224   3                receive_cardhead_success=0; 
 225   3              }
 226   2            }
 227   1      }
 228          
 229          //******//


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    802    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
